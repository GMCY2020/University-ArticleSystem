drop database if exists db_artSys;
create database if not exists db_artSys;

use db_artSys;

-- 用户 表
drop table if exists tb_user;
create table if not exists tb_user (
    user_id int primary key auto_increment,
    user_name varchar(50) unique not null ,
    user_password varchar(50) not null ,
    create_time datetime,
    update_time datetime
);

insert into
    tb_user(user_name, user_password, create_time, update_time)
values
    ('小一', '1234', now(), now()),
    ('小二', '1234', now(), now()),
    ('张三', '1234', now(), now()),
    ('李四', '1234', now(), now()),
    ('王五', '1234', now(), now()),
    ('老六', '1234', now(), now())
;


-- 文章 表
drop table if exists tb_article;
create table if not exists tb_article (
    art_id int primary key auto_increment,
    art_title varchar(50) not null ,
    art_detail varchar(2000) not null ,
    create_time datetime,
    update_time datetime
);

-- 数据来源于Ai生成
insert into
    tb_article (art_title, art_detail, create_time, update_time)
values
    ('Python怎么入门', 'Python是一种高级的、动态类型的编程语言，它非常适合初学者入门。以下是一些Python入门的步骤：\n\n安装Python：首先，你需要在你的计算机上安装Python。你可以从Python的官方网站下载最新版本的Python。\n选择开发环境：有很多种集成开发环境（IDE）可以选择，比如PyCharm、VS Code等。这些IDE可以帮助你更方便地编写、运行和调试Python代码。\n学习基础语法：Python的基础语法包括变量、数据类型（如数字、字符串、列表、元组、字典和集合）、条件语句（如if-else）、循环语句（如for和while）等。\n实践编程：通过编写一些简单的程序来实践Python的基础语法。你可以尝试编写一个程序来计算两个数的和，或者编写一个程序来打印出所有的水仙花数（一个数是其各位数字的立方和，如153=1³+5³+3³）。\n学习函数和模块：函数是一段可重复使用的代码块，它可以接受输入参数并返回结果。Python的标准库和第三方库中的函数和模块可以帮助你完成各种任务。\n学习异常处理和文件操作：了解如何处理程序中可能出现的错误（异常）以及如何进行文件操作。\n学习面向对象编程：面向对象编程是Python的一个重要特性，它包括类、对象、继承等概念。学习如何使用面向对象编程可以使你的代码更具有组织和复用性。\n参加编程挑战和课程：在完成基础语法的学习后，你可以参加一些在线的编程挑战或者参加一些付费的在线课程来进一步提高你的Python技能。\n持续实践：最重要的是持续不断地使用Python来编写代码，解决实际问题。通过不断地实践，你会越来越熟悉Python，并且可以更好地使用它。\n记住，学习编程不是一蹴而就的，需要不断地学习和实践。只要你坚持下去，你一定可以成为一名熟练的Python程序员。', now(), now()),
    ('Python怎样学精通', '要精通Python，你可以采取以下几个步骤：\n\n夯实基础：开始学习Python时，你需要掌握Python的基础知识，包括语法、数据类型、控制流、函数等。建议通过阅读权威的教材或参加在线课程来系统地学习Python的基础知识。\n深入学习：在掌握了Python的基础知识后，你可以开始深入学习Python的高级特性，如面向对象编程、错误和异常处理、文件和目录操作等。\n实践项目：要真正掌握Python，你需要通过实践项目来锻炼自己的技能。可以选择一些实际的项目来练习，例如开发一个Web应用程序、编写一个自动化脚本等。\n参与开源项目：参与开源项目是提高Python技能的好方法。你可以找到一些开源项目，阅读它们的源代码，尝试贡献自己的代码，通过与其他开发者的交流和学习，提高自己的编程能力。\n持续学习：Python是一门不断发展的编程语言，新的特性和库不断涌现。要保持对Python的精通，你需要持续关注Python的最新动态，学习新的特性和库。\n阅读和学习文档：Python有非常完善的文档和教程，包括官方文档、第三方库的文档等。通过阅读和学习这些文档，你可以深入了解Python的特性和用法，提高自己的编程能力。\n利用在线资源：互联网上有很多关于Python的在线资源，如在线课程、博客文章、论坛等。你可以通过这些资源来学习和交流，提高自己的Python技能。\n总之，精通Python需要不断地学习和实践。只有通过不断地努力和实践，你才能真正掌握Python并成为Python的高手。', now(), now()),
    ('Python如何成为大师', '要成为Python大师，需要掌握Python的高级特性和最佳实践，同时还需要了解Python的应用领域和相关技术。以下是一些建议：\n\n深入学习Python：除了掌握Python的基础知识，还需要深入学习Python的高级特性，如装饰器、生成器、上下文管理器、元编程等。这些特性可以使你更好地控制程序的执行流程，提高代码的可读性和可维护性。\n学习Python标准库和常用第三方库：Python的标准库包含了许多实用的模块和函数，了解它们的用法和最佳实践可以帮助你更好地编写代码。同时，也需要了解常用的第三方库，如NumPy、Pandas、Matplotlib等，这些库可以帮助你处理数据、可视化数据等。\n掌握Python应用领域：Python被广泛用于各种领域，如Web开发、数据科学、机器学习、网络爬虫、系统自动化、游戏开发等。要成为Python大师，你需要了解Python在这些领域的应用，并掌握相关的技术和工具。\n参与开源项目：参与开源项目是提高Python技能的好方法。你可以找到一些开源项目，阅读它们的源代码，尝试贡献自己的代码，通过与其他开发者的交流和学习，提高自己的编程能力。\n持续学习和实践：要保持对Python的精通，你需要持续关注Python的最新动态，学习新的特性和库。同时，也需要不断地实践，通过编写代码来锻炼自己的技能。\n探索Python的最佳实践：了解Python的最佳实践可以帮助你编写更好的代码。例如，你可以了解Python中的设计模式、代码规范、性能优化等最佳实践，并尝试在自己的代码中应用这些实践。\n分享和学习经验：与其他Python开发者交流和分享经验可以帮助你更好地掌握Python。你可以加入Python社区、参加技术会议、写技术博客等方式来分享和学习经验。\n总之，成为Python大师需要不断地学习和实践。只有通过不断地努力和实践，你才能真正掌握Python并成为Python的大师。', now(), now()),
    ('Java怎么入门', '要入门Java，可以遵循以下步骤：\n\n安装Java开发工具包（JDK）：首先，你需要在你的计算机上安装JDK。你可以从Oracle的官方网站下载和安装JDK。\n选择开发环境：有很多种集成开发环境（IDE）可以选择，比如Eclipse、IntelliJ IDEA等。这些IDE可以帮助你更方便地编写、运行和调试Java代码。\n学习基础语法：Java的基础语法包括变量、数据类型（如int、double、char等）、运算符和控制语句（如if-else、for循环等）。\n面向对象编程：Java是一种面向对象编程语言，因此你需要学习如何使用类和对象。了解如何定义类、创建对象以及使用继承和多态等面向对象编程的概念。\n异常处理和文件操作：了解如何处理程序中可能出现的异常以及如何进行文件操作。\n学习常用类库：Java标准库中包含了许多有用的类和接口，如String类、ArrayList类等。了解这些常用类库的用法可以帮助你更高效地编写代码。\n参加编程挑战和课程：在完成基础语法的学习后，你可以参加一些在线的编程挑战或者参加一些付费的在线课程来进一步提高你的Java技能。\n实践项目：通过实践项目来锻炼自己的技能。可以选择一些实际的项目来练习，例如开发一个简单的Web应用程序、编写一个命令行游戏等。\n持续学习和实践：要保持对Java的精通，你需要持续关注Java的最新动态，学习新的特性和库。同时，也需要不断地实践，通过编写代码来锻炼自己的技能。\n总之，要入门Java，需要掌握基础语法和面向对象编程的概念，并熟悉常用的类库和API。同时，通过实践项目和参加编程挑战和课程来锻炼自己的技能。只有通过不断地学习和实践，你才能真正掌握Java并成为一名优秀的Java开发者。', now(), now()),
    ('Java怎样学精通', '要精通Java，需要掌握Java的高级特性和最佳实践，同时还需要了解Java的应用领域和相关技术。以下是一些建议：\n\n深入学习Java：除了掌握Java的基础知识，还需要深入学习Java的高级特性，如泛型、注解、反射、并发编程等。这些特性可以使你更好地控制程序的执行流程，提高代码的可读性和可维护性。\n学习Java标准库和常用第三方库：Java标准库包含了许多实用的类和接口，了解它们的用法和最佳实践可以帮助你更好地编写代码。同时，也需要了解常用的第三方库，如Spring框架、Hibernate、MyBatis等，这些库可以帮助你更好地构建应用程序。\n掌握Java应用领域：Java被广泛用于各种领域，如Web开发、移动开发、桌面开发、游戏开发、大数据处理等。要精通Java，你需要了解Java在这些领域的应用，并掌握相关的技术和工具。\n参与开源项目：参与开源项目是提高Java技能的好方法。你可以找到一些开源项目，阅读它们的源代码，尝试贡献自己的代码，通过与其他开发者的交流和学习，提高自己的编程能力。\n持续学习和实践：要保持对Java的精通，你需要持续关注Java的最新动态，学习新的特性和库。同时，也需要不断地实践，通过编写代码来锻炼自己的技能。\n探索Java的最佳实践：了解Java的最佳实践可以帮助你编写更好的代码。例如，你可以了解Java中的设计模式、代码规范、性能优化等最佳实践，并尝试在自己的代码中应用这些实践。\n阅读Java经典书籍：有很多经典的Java书籍可以帮助你深入学习Java，如《Effective Java》、《Thinking in Java》、《Deep Java》等。\n分享和学习经验：与其他Java开发者交流和分享经验可以帮助你更好地掌握Java。你可以加入Java社区、参加技术会议、写技术博客等方式来分享和学习经验。\n总之，要精通Java，需要深入学习Java的高级特性和最佳实践，并不断地学习和实践。只有通过不断地努力和实践，你才能真正掌握Java并成为一名优秀的Java开发者。', now(), now()),
    ('Java如何成为大师', '要成为Java大师，需要掌握Java的高级特性和最佳实践，同时还需要了解Java的应用领域和相关技术。以下是一些建议：\n\n深入学习Java：除了掌握Java的基础知识，还需要深入学习Java的高级特性，如泛型、注解、反射、并发编程等。这些特性可以使你更好地控制程序的执行流程，提高代码的可读性和可维护性。\n学习Java标准库和常用第三方库：Java标准库包含了许多实用的类和接口，了解它们的用法和最佳实践可以帮助你更好地编写代码。同时，也需要了解常用的第三方库，如Spring框架、Hibernate、MyBatis等，这些库可以帮助你更好地构建应用程序。\n掌握Java应用领域：Java被广泛用于各种领域，如Web开发、移动开发、桌面开发、游戏开发、大数据处理等。要成为Java大师，你需要了解Java在这些领域的应用，并掌握相关的技术和工具。\n参与开源项目：参与开源项目是提高Java技能的好方法。你可以找到一些开源项目，阅读它们的源代码，尝试贡献自己的代码，通过与其他开发者的交流和学习，提高自己的编程能力。\n持续学习和实践：要保持对Java的精通，你需要持续关注Java的最新动态，学习新的特性和库。同时，也需要不断地实践，通过编写代码来锻炼自己的技能。\n分享和学习经验：与其他Java开发者交流和分享经验可以帮助你更好地掌握Java。你可以加入Java社区、参加技术会议、写技术博客等方式来分享和学习经验。\n教授和培训：通过教授和培训他人，可以帮助你巩固和提炼自己的知识体系。你可以撰写技术文章、开设在线课程或者在社区中担任讲师，将你的知识和经验传授给他人。\n解决问题和挑战：尝试解决复杂的问题和挑战，可以帮助你提高编程技能和解决问题的能力。你可以参与开源项目中的问题跟踪、参与技术挑战活动或者自己尝试解决实际遇到的技术难题。\n多角度学习：除了专注于Java本身，还可以学习其他相关技术和领域，如计算机科学基础理论、数据结构与算法、设计模式、软件架构等。这些知识将帮助你更好地理解Java的本质和应用。\n反思和总结：定期反思和总结自己的学习经验和方法，找到适合自己的学习路径和方式。同时，也要不断调整自己的学习计划和目标，以保持持续进步的动力。\n总之，成为Java大师需要深入学习Java的高级特性和最佳实践，并不断地学习和实践。同时，还需要与其他开发者交流和分享经验，参与开源项目和解决实际问题的挑战。只有通过不断地努力和实践，你才能真正掌握Java并成为一名优秀的Java大师。', now(), now()),
    ('Cpp怎么入门', '要入门C++，可以遵循以下步骤：\n\n安装C++编译器：首先，你需要在你的计算机上安装一个C++编译器，如GCC或Clang。这些编译器可以将C++代码转换成可执行程序。\n学习基础语法：C++的基础语法包括变量、数据类型（如int、double、char等）、运算符和控制语句（如if-else、for循环等）。\n学习面向对象编程：C++是一种面向对象编程语言，因此你需要学习如何使用类和对象。了解如何定义类、创建对象以及使用继承和多态等面向对象编程的概念。\n学习标准模板库（STL）：STL是一组用于算法和容器的头文件，包括向量、列表、映射等。了解STL可以帮助你更高效地编写代码。\n实践项目：通过实践项目来锻炼自己的技能。可以选择一些实际的项目来练习，例如开发一个简单的命令行游戏、编写一个计算器程序等。\n持续学习和实践：要保持对C++的精通，你需要持续关注C++的最新动态，学习新的特性和库。同时，也需要不断地实践，通过编写代码来锻炼自己的技能。\n总之，要入门C++，需要掌握基础语法和面向对象编程的概念，并熟悉标准模板库（STL）。通过实践项目和不断地学习和实践，你才能真正掌握C++并成为一名优秀的C++开发者。', now(), now()),
    ('Cpp怎样学精通', '要精通C++，需要深入学习和实践，以下是一些建议：\n\n掌握C++语言特性：要精通C++，首先需要熟练掌握C++的各种语言特性，包括基础语法、面向对象编程、模板元编程、异常处理、内存管理等。要理解这些特性的使用场景和最佳实践，能够运用自如。\n深入学习C++标准库和STL：C++标准库和STL是C++编程的重要组成部分，提供了丰富的数据结构和算法。要精通C++，需要深入学习这些库和STL的使用方法和实现原理，理解其内部结构和性能特点。\n阅读和理解优秀代码：阅读和理解优秀的C++代码是提高编程能力的重要途径。可以阅读一些开源项目的代码，如Boost、STL等，理解其设计思想和实现原理。同时，也可以阅读一些经典的C++书籍和论文，如《C++ Primer》、《Effective C++》等。\n实践编程：通过实践编程来巩固和加深对C++语言特性的理解和掌握。可以尝试编写一些复杂的程序或项目，如游戏、图形界面应用程序等，锻炼自己的编程能力和解决问题的能力。\n学习相关技术和工具：精通C++不仅限于掌握语言本身，还需要了解与其相关的技术和工具。例如，可以学习使用调试工具进行程序调试，学习使用性能分析工具进行性能优化等。\n参与开源项目和社区：参与开源项目和社区可以帮助你与其他C++开发者交流和分享经验，了解最新的技术动态和最佳实践。同时，也可以通过参与开源项目来提高自己的编程能力和团队协作能力。\n不断学习和探索：C++是一个不断发展和演进的编程语言，要保持对C++的精通，需要不断学习和探索新的技术和特性。可以关注C++社区的动态，参加技术会议和研讨会，了解最新的技术趋势和发展方向。\n总之，要精通C++需要深入学习和实践，掌握语言特性、标准库和STL的使用方法和实现原理，阅读和理解优秀代码，实践编程，学习相关技术和工具，参与开源项目和社区，不断学习和探索新的技术和特性。', now(), now()),
    ('Cpp如何成为大师', '熟练掌握C++的各种语言特性和库，包括基础语法、面向对象编程、模板元编程、异常处理、内存管理等。\n\n深入学习C++标准库和STL，了解其内部结构和性能特点。\n阅读和理解优秀的C++代码，如Boost、STL等，学习其设计思想和实现原理。\n实践编程，编写复杂的程序或项目，锻炼自己的编程能力和解决问题的能力。\n学习相关技术和工具，如调试工具、性能分析工具等。\n参与开源项目和社区，与其他C++开发者交流和分享经验。\n不断学习和探索新的技术和特性，关注C++社区的动态，参加技术会议和研讨会。', now(), now()),
    ('Js怎么入门', '学习JavaScript的基础语法，包括变量、数据类型、运算符、函数等。\n\n了解DOM（文档对象模型），学习如何操作HTML元素和事件处理。\n学习jQuery或其他JavaScript库，简化HTML文档遍历和操作。\n通过实践项目来练习JavaScript的使用，如制作网页特效、实现简单的交互功能等。', now(), now()),
    ('Js怎样学精通', '深入了解JavaScript的面向对象编程特性，学习原型链和继承等概念。\n\n学习使用闭包和回调函数，理解异步编程和事件循环。\n学习使用Node.js进行服务器端编程，了解JavaScript在服务器端的应用。\n学习使用前端框架，如React、Vue等，构建复杂的用户界面和单页应用程序。', now(), now()),
    ('Js如何成为大师', '深入研究和理解JavaScript的内部原理，如引擎实现、垃圾回收机制等。\n\n参与开源项目，阅读和理解其他优秀的JavaScript代码，学习其设计思想和实现原理。\n在实践中不断探索和创新，如使用新技术和库解决复杂问题、构建高效的前端应用等。', now(), now()),
    ('CSS怎么入门', '学习CSS的基础语法和选择器，了解盒模型和布局原理。\n\n学习CSS的常用属性和单位，如颜色、字体、背景等。\n学习CSS的布局技巧，如浮动布局、定位等。', now(), now()),
    ('CSS怎样学精通', '深入了解CSS的盒模型、布局原理和渲染机制。\n\n学习CSS的高级技巧和特性，如CSS变量（变量）、动画和过渡效果等。\n学习响应式设计原理和实践，适应不同设备和屏幕尺寸的显示需求。', now(), now()),
    ('CSS如何成为大师', '深入研究和理解CSS的内部原理和规范制定过程。\n\n参与CSS框架的开发和设计，如Bootstrap、Foundation等。\n在实践中不断探索和创新，如开发高效的重构工具、研究新的CSS特性和技术等。', now(), now()),
    ('Html怎么入门', '学习HTML的基础标签和语义化标签。\n\n学习如何编写符合规范的HTML文档结构。\n学习使用HTML5的新特性和API，如音视频播放、画布绘制等。', now(), now()),
    ('Html怎样学精通', '深入了解HTML的语义化和SEO优化技巧。\n\n学习使用HTML5的离线和存储机制，如localStorage、IndexedDB等。\n学习使用HTML5的Web Workers进行多线程编程。', now(), now()),
    ('Html如何成为大师', '深入研究和理解HTML的内部原理和规范制定过程。\n\n在实践中不断探索和创新，如开发高效的自动化工具、研究新的HTML特性和技术等。', now(), now()),
    ('Web怎么入门', '了解基本概念：首先，需要了解Web开发的基本概念，包括网页、网站、Web服务器、HTTP协议等。\n\n学习HTML：HTML是构建网页的基础，学习HTML的语法和常用标签，了解如何创建和组织网页内容。\n学习CSS：CSS用于样式化网页，学习CSS的基本语法和选择器，了解如何设置网页布局和外观。\n了解JavaScript：JavaScript用于添加交互性和动态功能，学习JavaScript的基本语法和事件处理，了解如何在网页中使用JavaScript。\n学习使用开发工具：使用合适的文本编辑器或集成开发环境（IDE）进行Web开发，学习如何使用这些工具进行代码编写和调试。', now(), now()),
    ('Web怎样学精通', '深入学习HTML5和CSS3：了解HTML5和CSS3的高级特性和最佳实践，如响应式设计、动画效果等。\n\n深入学习JavaScript：掌握JavaScript的高级特性，如闭包、原型链、模块化等，了解如何使用JavaScript框架（如React、Vue等）进行复杂应用开发。\n学习Web性能优化：了解如何优化网页加载速度和渲染性能，学习使用工具进行性能分析和优化。\n学习前后端交互：了解前后端交互的机制和常见的数据交换格式（如JSON），学习如何使用Ajax和Fetch API进行异步数据请求和处理。\n学习Web安全：了解常见的Web安全问题和防护措施，如XSS攻击、CSRF攻击等，学习如何保护网站和用户数据的安全。', now(), now()),
    ('Web如何成为大师', '深入研究和理解Web技术原理：了解Web技术的底层原理和实现机制，如HTTP协议、浏览器渲染机制等。\n\n参与开源项目和社区：参与开源项目和社区，与其他开发者交流和分享经验，了解最新的技术动态和最佳实践。\n在实践中不断探索和创新：在项目中尝试使用新技术和解决方案，探索更好的开发方法和工具，推动Web技术的发展。\n教授和培训他人：通过教授和培训他人，可以帮助巩固和提炼自己的知识体系，同时也可以促进Web技术的传播和发展。\n关注行业动态和标准发展：关注Web行业的动态和标准发展，了解最新的技术趋势和发展方向，保持对新技术的学习和探索。', now(), now())
;


-- 用户编写的文章 关联表
drop table if exists tb_userArt;
create table if not exists tb_userArt (
    user_id int,
    art_id int unique
);

insert into
    tb_userArt (user_id, art_id)
values
    (1, 1),
    (1, 2),
    (1, 3),
    (2, 4),
    (2, 5),
    (2, 6),
    (3, 7),
    (3, 8),
    (3, 9),
    (4, 10),
    (4, 11),
    (4, 12),
    (5, 13),
    (5, 14),
    (5, 15),
    (6, 16),
    (6, 17),
    (6, 18),
    (5, 19),
    (5, 20),
    (5, 21)
;


-- 用户收藏的文章 关联表
drop table if exists tb_userStar;
create table tb_userStar (
    user_id int,
    art_id int,
    constraint u_ua unique (user_id, art_id)
);

insert into
    tb_userStar (user_id, art_id)
values
    (1, 1),
    (1, 2),
    (1, 3),
    (1, 4),
    (1, 5),
    (1, 11),
    (1, 12),
    (1, 13),
    (1, 14),
    (1, 15),
    (2, 1),
    (2, 2),
    (2, 3),
    (2, 4),
    (2, 5),
    (2, 11),
    (2, 12),
    (2, 13),
    (2, 14),
    (2, 15),
    (3, 6),
    (3, 7),
    (3, 8),
    (3, 9),
    (3, 10),
    (3, 11),
    (3, 12),
    (3, 13),
    (3, 14),
    (3, 15)
;
